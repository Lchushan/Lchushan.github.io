(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{587:function(a,v,_){"use strict";_.r(v);var t=_(14),n=Object(t.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h2",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),v("p",[a._v("随着技术栈越来越广泛，许多前端框架也层出不穷，使得我们在构建 web 应用时，由于技术栈之间的差异，难以协同开发。而目前其中一个主流方案就是使用微前端，让不同技术栈、框架能独立开发，独立部署子模块，再共同嵌入主模块，形成一个完整的大型 web 应用。微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。")]),a._v(" "),v("p",[a._v("本文主要介绍微前端实现方案之一：qiankun。")]),a._v(" "),v("h2",{attrs:{id:"介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[a._v("#")]),a._v(" 介绍")]),a._v(" "),v("h3",{attrs:{id:"微前端"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微前端"}},[a._v("#")]),a._v(" 微前端")]),a._v(" "),v("p",[a._v("微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。")]),a._v(" "),v("p",[a._v("微前端架构具备以下几个核心价值：")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("技术栈无关")]),a._v(" "),v("ul",[v("li",[a._v("主框架不限制接入应用的技术栈，微应用具备完全自主权")])])]),a._v(" "),v("li",[v("p",[a._v("独立开发、独立部署")]),a._v(" "),v("ul",[v("li",[a._v("微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新")])])]),a._v(" "),v("li",[v("p",[a._v("增量升级")]),a._v(" "),v("ul",[v("li",[a._v("在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略")])])]),a._v(" "),v("li",[v("p",[a._v("独立运行时")]),a._v(" "),v("ul",[v("li",[a._v("每个微应用之间状态隔离，运行时状态不共享")])])])]),a._v(" "),v("p",[a._v("微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(Frontend Monolith)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。")]),a._v(" "),v("h3",{attrs:{id:"qiankun"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#qiankun"}},[a._v("#")]),a._v(" qiankun")]),a._v(" "),v("p",[a._v("qiankun 是一个基于 single-spa 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。")]),a._v(" "),v("p",[a._v("qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。")]),a._v(" "),v("p",[a._v("目前 qiankun 已在蚂蚁内部服务了超过 2000+ 线上应用，在易用性及完备性上，绝对是值得信赖的。")]),a._v(" "),v("h4",{attrs:{id:"qiankun-的核心理念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#qiankun-的核心理念"}},[a._v("#")]),a._v(" qiankun 的核心理念：")]),a._v(" "),v("h5",{attrs:{id:"简单"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简单"}},[a._v("#")]),a._v(" 简单")]),a._v(" "),v("p",[a._v("由于主应用微应用都能做到技术栈无关，qiankun 对于用户而言只是一个类似 jQuery 的库，你需要调用几个 qiankun 的 API 即可完成应用的微前端改造。同时由于 qiankun 的 HTML entry 及沙箱的设计，使得微应用的接入像使用 iframe 一样简单。")]),a._v(" "),v("h5",{attrs:{id:"解耦-技术栈无关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解耦-技术栈无关"}},[a._v("#")]),a._v(" 解耦/技术栈无关")]),a._v(" "),v("p",[a._v("微前端的核心目标是将巨石应用拆解成若干可以自治的松耦合微应用，而 qiankun 的诸多设计均是秉持这一原则，如 HTML entry、沙箱、应用间通信等。这样才能确保微应用真正具备 独立开发、独立运行 的能力。")]),a._v(" "),v("h4",{attrs:{id:"特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[a._v("#")]),a._v(" 特性：")]),a._v(" "),v("ul",[v("li",[a._v("基于 single-spa 封装，提供了更加开箱即用的 API。")]),a._v(" "),v("li",[a._v("技术栈无关，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。")]),a._v(" "),v("li",[a._v("HTML Entry 接入方式，让你接入微应用像使用 iframe 一样简单。")]),a._v(" "),v("li",[a._v("样式隔离，确保微应用之间样式互相不干扰。")]),a._v(" "),v("li",[a._v("JS 沙箱，确保微应用之间 全局变量/事件 不冲突。")]),a._v(" "),v("li",[a._v("资源预加载，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。")]),a._v(" "),v("li",[a._v("umi 插件，提供了 @umijs/plugin-qiankun 供 umi 应用一键切换成微前端架构系统。")])])])}),[],!1,null,null,null);v.default=n.exports}}]);